{% set intro %}
Craft CMS offers a flexible, tailored experience for content editors and developers. In this section we’ll take a look at some of the high-level features specifically for developers.
{% endset %}

{% set content %}
## Composer & Yii

![]({{ alias('@assetBaseUrl/assets/guide/composer-yii.png') }})

Craft is more like a content management framework than strictly a CMS.

It’s a modern PHP application that uses [Composer](https://getcomposer.org) and is built on the Yii framework. When you need to go beyond Craft’s stock configuration, developer APIs, and available plugins in the broader ecosystem, you can tap into the underlying framework to do just about anything. Craft takes advantage of Yii’s [dependency injection](https://www.yiiframework.com/doc/guide/2.0/en/concept-di-container), which allows you to swap in your own lower-level components if that’s something you need. You could introduce your own cache or database drivers, for example.

## Software Updates

![]({{ alias('@assetBaseUrl/assets/guide/software-updates.png') }})

Craft’s control panel will automatically notify admins when software updates are available, including each new version along with its change notes. Craft and Craft plugins can also flag any critical security updates for extra attention.

Updates are typically made locally with Composer, then pushed to source control that carries updates migrations through to production.

## Multi-Environment Support

![]({{ alias('@assetBaseUrl/assets/guide/multi-environment-support.png') }})

Craft is built with multiple environments in mind: local development, staging, production, and any others you may need to utilize. It offers visual cues to distinguish local development from production, and can be flexibly configured with environment variables.

## Craft Nitro

![]({{ alias('@assetBaseUrl/assets/guide/craft-nitro.png') }})

Craft CMS has a free, first-party, Docker-based local development environment called [Craft Nitro](https://getnitro.sh) that’s the fastest way to get working with Craft on macOS, Linux, and Windows.

## Project Config

![]({{ alias('@assetBaseUrl/assets/guide/project-config.png') }})

Craft ships with a feature called [Project Config](https://craftcms.com/docs/3.x/project-config.html), which stores Craft’s configuration as static YAML that can be version-controlled and synced into different environments. This makes it easier for teams to work on different parts of a project and merge configuration changes just like any other code. Craft supports a special environment variable placeholder syntax so you can share references to secrets without committing them into this YAML.

## Hybrid CMS

![]({{ alias('@assetBaseUrl/assets/guide/hybrid-cms.png') }})

Craft’s full GraphQL API makes it great for headless sites, and its native Twig templating system makes it great for traditional, monolithic sites. A project could utilize _both_ headless and monolithic front ends, or transition from one to the other over its lifespan, without any impact on content editors.

The complete control over the software stack and data ownership can offer critical flexibility as a site grows and evolves.

## Documentation & Community

![]({{ alias('@assetBaseUrl/assets/guide/documentation-community.png') }})

Craft has [extensive documentation](https://craftcms.com/docs/), first-party [support options](https://craftcms.com/support-services), and a vibrant, friendly professional community. But don’t take our word for it! Check out [some popular resources](https://craftcms.com/docs/#explore-popular-resources), ask a question on [Twitter](https://twitter.com/craftcms) or [Discord](https://craftcms.com/discord), and see for yourself.
{% endset %}

{% if intro is defined and intro is not empty %}
  <div class="intro">
    {{ intro|markdown }}
  </div>
{% endif %}

{{ content|markdown|anchors }}

